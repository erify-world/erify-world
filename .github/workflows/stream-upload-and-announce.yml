---
name: 🎬 ERIFY Stream Upload & Announce

on:
  workflow_dispatch:
    inputs:
      upload_type:
        description: 'Upload type (url or path)'
        required: true
        default: 'url'
        type: choice
        options:
          - url
          - path
      source_url:
        description: 'Source URL for stream content'
        required: false
        type: string
      source_path:
        description: 'Local path for stream content'
        required: false
        type: string
      generate_thumbnail:
        description: 'Generate thumbnail for stream'
        required: false
        default: false
        type: boolean
      announcement_channels:
        description: 'Channels for announcements (comma-separated)'
        required: false
        default: 'general,streams'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no actual uploads/announcements)'
        required: false
        default: false
        type: boolean
      signing_enabled:
        description: 'Enable URL signing for secure access'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'streams/**'
      - '.github/workflows/stream-upload-and-announce.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'streams/**'
      - '.github/workflows/stream-upload-and-announce.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: write

env:
  ERIFY_STREAM_BUCKET: ${{ secrets.ERIFY_STREAM_BUCKET || 'erify-streams' }}
  ERIFY_CDN_DOMAIN: ${{ secrets.ERIFY_CDN_DOMAIN || 'cdn.erifyworld.com' }}
  SIGNING_SECRET: ${{ secrets.ERIFY_SIGNING_SECRET }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  validate-inputs:
    name: 🔍 Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      upload_type: ${{ steps.validation.outputs.upload_type }}
      source_url: ${{ steps.validation.outputs.source_url }}
      source_path: ${{ steps.validation.outputs.source_path }}
      generate_thumbnail: ${{ steps.validation.outputs.generate_thumbnail }}
      announcement_channels: ${{ steps.validation.outputs.announcement_channels }}
      dry_run: ${{ steps.validation.outputs.dry_run }}
      signing_enabled: ${{ steps.validation.outputs.signing_enabled }}
      workflow_id: ${{ steps.validation.outputs.workflow_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate and normalize inputs
        id: validation
        run: |
          # Set defaults for workflow dispatch
          UPLOAD_TYPE="${{ github.event.inputs.upload_type || 'url' }}"
          SOURCE_URL="${{ github.event.inputs.source_url || '' }}"
          SOURCE_PATH="${{ github.event.inputs.source_path || '' }}"
          GENERATE_THUMBNAIL="${{ github.event.inputs.generate_thumbnail || 'false' }}"
          ANNOUNCEMENT_CHANNELS="${{ github.event.inputs.announcement_channels || 'general,streams' }}"
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          SIGNING_ENABLED="${{ github.event.inputs.signing_enabled || 'true' }}"
          
          # Generate unique workflow ID
          WORKFLOW_ID="erify-stream-$(date +%s)-${GITHUB_RUN_NUMBER}"
          
          # Validation logic
          if [[ "$UPLOAD_TYPE" == "url" && -z "$SOURCE_URL" ]]; then
            echo "❌ Source URL is required when upload_type is 'url'"
            exit 1
          fi
          
          if [[ "$UPLOAD_TYPE" == "path" && -z "$SOURCE_PATH" ]]; then
            echo "❌ Source path is required when upload_type is 'path'"
            exit 1
          fi
          
          if [[ "$UPLOAD_TYPE" == "url" ]]; then
            # Validate URL format
            if ! curl --output /dev/null --silent --head --fail "$SOURCE_URL"; then
              echo "❌ Source URL is not accessible: $SOURCE_URL"
              exit 1
            fi
          fi
          
          echo "✅ Validation passed"
          echo "upload_type=$UPLOAD_TYPE" >> $GITHUB_OUTPUT
          echo "source_url=$SOURCE_URL" >> $GITHUB_OUTPUT
          echo "source_path=$SOURCE_PATH" >> $GITHUB_OUTPUT
          echo "generate_thumbnail=$GENERATE_THUMBNAIL" >> $GITHUB_OUTPUT
          echo "announcement_channels=$ANNOUNCEMENT_CHANNELS" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "signing_enabled=$SIGNING_ENABLED" >> $GITHUB_OUTPUT
          echo "workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT

      - name: Display validation results
        run: |
          echo "🎯 **Workflow Configuration:**"
          echo "- Upload Type: ${{ steps.validation.outputs.upload_type }}"
          echo "- Source URL: ${{ steps.validation.outputs.source_url }}"
          echo "- Source Path: ${{ steps.validation.outputs.source_path }}"
          echo "- Generate Thumbnail: ${{ steps.validation.outputs.generate_thumbnail }}"
          echo "- Announcement Channels: ${{ steps.validation.outputs.announcement_channels }}"
          echo "- Dry Run: ${{ steps.validation.outputs.dry_run }}"
          echo "- Signing Enabled: ${{ steps.validation.outputs.signing_enabled }}"
          echo "- Workflow ID: ${{ steps.validation.outputs.workflow_id }}"

  stream-processing:
    name: 🎬 Process Stream Content
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      stream_url: ${{ steps.upload.outputs.stream_url }}
      thumbnail_url: ${{ steps.thumbnail.outputs.thumbnail_url }}
      signed_url: ${{ steps.signing.outputs.signed_url }}
      content_hash: ${{ steps.upload.outputs.content_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --no-package-lock
          # Install additional tools for stream processing
          npm install -g @aws-cli/aws-cli ffmpeg-static

      - name: Download/Prepare stream content
        id: download
        run: |
          mkdir -p ./temp-streams
          
          if [[ "${{ needs.validate-inputs.outputs.upload_type }}" == "url" ]]; then
            echo "📥 Downloading from URL: ${{ needs.validate-inputs.outputs.source_url }}"
            if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would download from ${{ needs.validate-inputs.outputs.source_url }}"
              # Create dummy file for dry run
              echo "dummy content" > ./temp-streams/stream-content
            else
              curl -L "${{ needs.validate-inputs.outputs.source_url }}" -o "./temp-streams/stream-content"
            fi
          else
            echo "📁 Using local path: ${{ needs.validate-inputs.outputs.source_path }}"
            if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would copy from ${{ needs.validate-inputs.outputs.source_path }}"
              echo "dummy content" > ./temp-streams/stream-content
            else
              cp "${{ needs.validate-inputs.outputs.source_path }}" ./temp-streams/stream-content
            fi
          fi
          
          # Calculate content hash
          CONTENT_HASH=$(sha256sum ./temp-streams/stream-content | cut -d' ' -f1)
          echo "content_hash=$CONTENT_HASH" >> $GITHUB_OUTPUT
          echo "✅ Content prepared with hash: $CONTENT_HASH"

      - name: Generate thumbnail
        id: thumbnail
        if: needs.validate-inputs.outputs.generate_thumbnail == 'true'
        run: |
          echo "🖼️ Generating thumbnail..."
          
          if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
            echo "🏃‍♂️ DRY RUN: Would generate thumbnail"
            THUMBNAIL_URL="https://${{ env.ERIFY_CDN_DOMAIN }}/thumbnails/${{ needs.validate-inputs.outputs.workflow_id }}-thumb.jpg"
          else
            # Use ffmpeg to generate thumbnail (if video content)
            # For now, create a placeholder
            mkdir -p ./temp-streams/thumbnails
            echo "thumbnail-placeholder" > ./temp-streams/thumbnails/thumb.jpg
            
            # Upload thumbnail to CDN (placeholder logic)
            THUMBNAIL_URL="https://${{ env.ERIFY_CDN_DOMAIN }}/thumbnails/${{ needs.validate-inputs.outputs.workflow_id }}-thumb.jpg"
          fi
          
          echo "thumbnail_url=$THUMBNAIL_URL" >> $GITHUB_OUTPUT
          echo "✅ Thumbnail generated: $THUMBNAIL_URL"

      - name: Upload stream content
        id: upload
        run: |
          echo "☁️ Uploading stream content..."
          
          if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
            echo "🏃‍♂️ DRY RUN: Would upload to ${{ env.ERIFY_STREAM_BUCKET }}"
            STREAM_URL="https://${{ env.ERIFY_CDN_DOMAIN }}/streams/${{ needs.validate-inputs.outputs.workflow_id }}"
          else
            # Upload to cloud storage (placeholder logic)
            # In real implementation, this would use AWS CLI or similar
            STREAM_URL="https://${{ env.ERIFY_CDN_DOMAIN }}/streams/${{ needs.validate-inputs.outputs.workflow_id }}"
            
            # Simulate upload delay
            sleep 2
          fi
          
          echo "stream_url=$STREAM_URL" >> $GITHUB_OUTPUT
          echo "content_hash=${{ steps.download.outputs.content_hash }}" >> $GITHUB_OUTPUT
          echo "✅ Stream uploaded: $STREAM_URL"

      - name: Generate signed URL
        id: signing
        if: needs.validate-inputs.outputs.signing_enabled == 'true'
        run: |
          echo "🔐 Generating signed URL..."
          
          STREAM_URL="${{ steps.upload.outputs.stream_url }}"
          
          if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
            echo "🏃‍♂️ DRY RUN: Would generate signed URL"
            SIGNED_URL="${STREAM_URL}?signature=dry-run-signature&expires=2024-12-31"
          else
            # Generate actual signed URL with expiration
            EXPIRES=$(date -d "+24 hours" +%s)
            
            # Simple signing logic (in real implementation, use proper HMAC)
            SIGNATURE=$(echo -n "${STREAM_URL}${EXPIRES}" | sha256sum | cut -d' ' -f1)
            SIGNED_URL="${STREAM_URL}?signature=${SIGNATURE}&expires=${EXPIRES}"
          fi
          
          echo "signed_url=$SIGNED_URL" >> $GITHUB_OUTPUT
          echo "✅ Signed URL generated"

  polling-monitor:
    name: 📊 Monitor Upload Status
    runs-on: ubuntu-latest
    needs: [validate-inputs, stream-processing]
    steps:
      - name: Poll upload status
        run: |
          echo "📊 Monitoring upload status..."
          
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
            echo "🔄 Polling attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Simulating successful upload check"
              STATUS="success"
            else
              # Check if stream URL is accessible
              if curl --output /dev/null --silent --head --fail "${{ needs.stream-processing.outputs.stream_url }}"; then
                STATUS="success"
              else
                STATUS="pending"
              fi
            fi
            
            if [[ "$STATUS" == "success" ]]; then
              echo "✅ Upload confirmed successful"
              break
            fi
            
            echo "⏳ Upload still in progress, waiting..."
            sleep 30
            ((ATTEMPT++))
          done
          
          if [[ $ATTEMPT -gt $MAX_ATTEMPTS ]]; then
            echo "❌ Upload monitoring timed out"
            exit 1
          fi

  multi-channel-announce:
    name: 📢 Multi-Channel Announcements
    runs-on: ubuntu-latest
    needs: [validate-inputs, stream-processing, polling-monitor]
    if: always() && needs.stream-processing.result == 'success'
    steps:
      - name: Prepare announcement content
        id: content
        run: |
          # Prepare announcement message
          STREAM_URL="${{ needs.stream-processing.outputs.stream_url }}"
          SIGNED_URL="${{ needs.stream-processing.outputs.signed_url }}"
          THUMBNAIL_URL="${{ needs.stream-processing.outputs.thumbnail_url }}"
          CONTENT_HASH="${{ needs.stream-processing.outputs.content_hash }}"
          
          FINAL_URL="${SIGNED_URL:-$STREAM_URL}"
          
          ANNOUNCEMENT="🎬 **New ERIFY Stream Available!**
          
          🔗 **Stream URL:** $FINAL_URL
          🆔 **Workflow ID:** ${{ needs.validate-inputs.outputs.workflow_id }}
          🔒 **Content Hash:** ${CONTENT_HASH:0:12}...
          📅 **Uploaded:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          "
          
          if [[ -n "$THUMBNAIL_URL" ]]; then
            ANNOUNCEMENT="$ANNOUNCEMENT
          🖼️ **Thumbnail:** $THUMBNAIL_URL"
          fi
          
          if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
            ANNOUNCEMENT="$ANNOUNCEMENT
          
          🏃‍♂️ **Note:** This was a DRY RUN - no actual content was uploaded"
          fi
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$ANNOUNCEMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Announce to Discord
        if: env.DISCORD_WEBHOOK != ''
        run: |
          IFS=',' read -ra CHANNELS <<< "${{ needs.validate-inputs.outputs.announcement_channels }}"
          
          for channel in "${CHANNELS[@]}"; do
            channel=$(echo "$channel" | xargs) # trim whitespace
            echo "📢 Announcing to Discord channel: $channel"
            
            if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would announce to Discord"
            else
              curl -X POST "${{ env.DISCORD_WEBHOOK }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"content\": \"${{ steps.content.outputs.message }}\",
                  \"username\": \"ERIFY Stream Bot\",
                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/erify-world\"
                }" || echo "⚠️ Discord announcement failed for channel: $channel"
            fi
          done

      - name: Announce to Slack
        if: env.SLACK_WEBHOOK != ''
        run: |
          IFS=',' read -ra CHANNELS <<< "${{ needs.validate-inputs.outputs.announcement_channels }}"
          
          for channel in "${CHANNELS[@]}"; do
            channel=$(echo "$channel" | xargs) # trim whitespace
            echo "📢 Announcing to Slack channel: $channel"
            
            if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would announce to Slack"
            else
              curl -X POST "${{ env.SLACK_WEBHOOK }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"text\": \"${{ steps.content.outputs.message }}\",
                  \"channel\": \"#$channel\",
                  \"username\": \"ERIFY Stream Bot\",
                  \"icon_emoji\": \":movie_camera:\"
                }" || echo "⚠️ Slack announcement failed for channel: $channel"
            fi
          done

  pr-comment:
    name: 💬 PR Comment Update
    runs-on: ubuntu-latest
    needs: [validate-inputs, stream-processing, multi-channel-announce]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const streamUrl = '${{ needs.stream-processing.outputs.stream_url }}';
            const signedUrl = '${{ needs.stream-processing.outputs.signed_url }}';
            const thumbnailUrl = '${{ needs.stream-processing.outputs.thumbnail_url }}';
            const workflowId = '${{ needs.validate-inputs.outputs.workflow_id }}';
            const isDryRun = '${{ needs.validate-inputs.outputs.dry_run }}' === 'true';
            
            const finalUrl = signedUrl || streamUrl;
            
            let comment = `## 🎬 ERIFY Stream Workflow Results
            
            **Workflow ID:** \`${workflowId}\`
            **Stream URL:** ${finalUrl}
            ${thumbnailUrl ? `**Thumbnail:** ${thumbnailUrl}` : ''}
            **Status:** ✅ Success
            **Uploaded:** ${new Date().toISOString()}
            `;
            
            if (isDryRun) {
              comment += `\n**Note:** 🏃‍♂️ This was a DRY RUN - no actual content was uploaded`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [validate-inputs, stream-processing, multi-channel-announce]
    if: always()
    steps:
      - name: Cleanup temporary files
        run: |
          echo "🧹 Cleaning up temporary files..."
          
          if [[ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]]; then
            echo "🏃‍♂️ DRY RUN: Would cleanup temporary files"
          else
            # Remove any temporary files created during the workflow
            rm -rf ./temp-streams || true
            echo "✅ Cleanup completed"
          fi

      - name: Workflow summary
        run: |
          echo "## 🎬 ERIFY Stream Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow ID:** \`${{ needs.validate-inputs.outputs.workflow_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Upload Type:** ${{ needs.validate-inputs.outputs.upload_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Stream URL:** ${{ needs.stream-processing.outputs.stream_url }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ needs.stream-processing.outputs.signed_url }}" ]]; then
            echo "**Signed URL:** ${{ needs.stream-processing.outputs.signed_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ needs.stream-processing.outputs.thumbnail_url }}" ]]; then
            echo "**Thumbnail:** ${{ needs.stream-processing.outputs.thumbnail_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Announcement Channels:** ${{ needs.validate-inputs.outputs.announcement_channels }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ needs.validate-inputs.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Workflow completed successfully" >> $GITHUB_STEP_SUMMARY